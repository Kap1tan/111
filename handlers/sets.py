# -*- coding: utf-8 -*-
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–±–æ—Ä–æ–≤ –®—É–ø

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ContextTypes

from config import BUTTONS, States, PHOTOS_PATH
from models import SHUPA_SETS
from database import db


async def choose_set_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –®—É–ø."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.update_user_data(user_id, "state", States.CHOOSING_SET)

    text = """
‚ú® *–í—ã–±–µ—Ä–∏ –Ω–∞–±–æ—Ä –®—É–ø, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç* ‚ú®

–ö–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä –∏–º–µ–µ—Ç —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.
–†–∞—Å–∫—Ä–æ–π —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å –ø–æ–º–æ—â—å—é –¥—Ä–µ–≤–Ω–µ–π —Å–∏–ª—ã –®—É–ø!
"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –Ω–∞–±–æ—Ä–∞–º–∏
    keyboard = []
    for shupa_set in SHUPA_SETS:
        keyboard.append([InlineKeyboardButton(
            shupa_set["name"],
            callback_data=f'view_set_{shupa_set["id"]}'
        )])

    keyboard.append([InlineKeyboardButton(BUTTONS["back"], callback_data='back_to_start')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    return States.CHOOSING_SET


async def view_set_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–∞–±–æ—Ä–∞ –∏–∑ callback_data
    set_id = query.data.split('_')[-1]

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–±–æ—Ä –ø–æ ID
    selected_set = next((item for item in SHUPA_SETS if item["id"] == set_id), None)

    if not selected_set:
        await query.edit_message_text(
            "–ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(BUTTONS["back"], callback_data='back_to_start')
            ]])
        )
        return States.START

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä
    db.update_user_data(user_id, "state", States.VIEWING_SET)
    db.update_user_data(user_id, "selected_set", set_id)
    db.add_viewed_set(user_id, set_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton(BUTTONS["want_this"], callback_data=f'want_{set_id}')],
        [InlineKeyboardButton(BUTTONS["back"], callback_data='choose_set')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
    photo_path = os.path.join(PHOTOS_PATH, selected_set["photo"])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(photo_path):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await query.edit_message_text(
            f"{selected_set['full_description']}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return States.VIEWING_SET

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    with open(photo_path, 'rb') as photo_file:
        await query.message.reply_photo(
            photo=photo_file,
            caption=selected_set["full_description"],
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.delete_message()

    return States.VIEWING_SET


async def want_set_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–∞–±–æ—Ä–∞ –∏–∑ callback_data
    set_id = query.data.split('_')[-1]

    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–±–æ—Ä –ø–æ ID
    selected_set = next((item for item in SHUPA_SETS if item["id"] == set_id), None)

    if not selected_set:
        await query.edit_message_text(
            "–ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(BUTTONS["back"], callback_data='back_to_start')
            ]])
        )
        return States.START

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_order(user_id, set_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"""
‚ú® *–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!* ‚ú®

–¢—ã –≤—ã–±—Ä–∞–ª –Ω–∞–±–æ—Ä "*{selected_set["name"]}*".

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Å—å —Å –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
–û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.

–¢–≤–æ–π –Ω–∞–±–æ—Ä —É–∂–µ –∂–¥–µ—Ç —Ç–µ–±—è! üí´
"""

    keyboard = [
        [InlineKeyboardButton(BUTTONS["write_admin"], callback_data='contact_admin')],
        [InlineKeyboardButton(BUTTONS["back"], callback_data=f'view_set_{set_id}')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    return States.VIEWING_SET